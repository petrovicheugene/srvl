//============================================================
#ifndef ZMEASURINGPARAMETERSHANDLER_H
#define ZMEASURINGPARAMETERSHANDLER_H
//============================================================
#include <QObject>
#include <QColor>
//============================================================

//============================================================
class ZMeasuringParametersHandler
{
public:
    ZMeasuringParametersHandler();
    // initial data for parameters calculation: deadTimeMs, expositionPassedTimeMs, spectrumIntensityIntegral
    enum MeasuringParameter {MP_PASSED_EXPOSITION,
                             MS_ALIVE_TIME,
                             MS_DEAD_TIME,
                             MS_DEAD_TIME_PERCENT,
                             MS_INPUT_WORKLOAD,
                             MS_OUTPUT_WORKLOAD,
                             MS_SPECTRUM_INTENSITY_INTEGRAL};
    
    static void zp_setColorForParameter(MeasuringParameter parameter, QColor color);
    static void zp_setShortStringForParameter(MeasuringParameter parameter, QString string);
    
    static bool zp_calcParametersAndConvertToHtml(quint32 expositionPassedMs,
                                        quint32 deadTimeMs,
                                        quint32 spectrumIntensityIntegral,
                                        QString& outHtmlString);
    
    static bool zp_calcParameters(quint32 expositionPassedMs,
                                            quint32 deadTimeMs,
                                            quint32 spectrumIntensityIntegral,
                           quint32& outAliveTime,
                           quint32& outdeadTimePercent,
                           quint32& outInputWorkload,
                           quint32& outOutputWorkload);
    
    
private:
    
    // VARS
    static zv_measurement
    
    
};
//============================================================
#endif // ZMEASURINGPARAMETERSHANDLER_H