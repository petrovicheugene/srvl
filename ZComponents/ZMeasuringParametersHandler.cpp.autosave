//============================================================
#include "ZMeasurementParametersHandler.h"
//============================================================
ZMeasuringParametersHandler::ZMeasuringParametersHandler()
{

}
//============================================================
// data has been changed
// calc average income and outcome workload
// dead - alive time
//quint32 deadTime = static_cast<quint32>((static_cast<double>(zv_DeadTime) * (static_cast<double>(zv_ticDuration) / 1000.0)));
//quint32 aliveTime = zv_Time - (deadTime);
//double deadTimePercent = zv_Time == 0? 0.0 : static_cast<double>(deadTime) / (static_cast<double>(zv_Time) / 100.0 );
//// integral
//CHANNEL integral = 0;
//for(int i = 0; i < zv_bufferChannelSize; i++)
//{
//    integral += *(zv_buffer + i);
//}

//// workload
//quint32 averageOutLoad = zv_Time == 0?  0 : static_cast<quint32>((static_cast<double>(integral) / (static_cast<double>(zv_Time) / 1000.0)));
//quint32 averageInLoad = aliveTime == 0? 0 : static_cast<quint32>((static_cast<double>(integral)  / (static_cast<double>(aliveTime) / 1000.0)));

//qDebug() << "INTEGRAL" << integral << "pLoad" << zv_Load << "zv_DeadTime" << zv_DeadTime  << "zv_CountEvent" <<  zv_CountEvent << "L.IN" << averageInLoad << "L.OUT" << averageOutLoad << "D.T." << deadTime << "A.T"  << aliveTime << "D.T.%" << deadTimePercent << "T." << zv_Time;
//============================================================
void ZMeasuringParametersHandler::zp_setColorForParameter(MeasurementParameter parameter, QColor color)
{
    
}
//============================================================
void ZMeasuringParametersHandler::zp_setShortStringForParameter(MeasurementParameter parameter, QString string)
{
    
}
//============================================================
bool ZMeasuringParametersHandler::zp_calcParametersAndConvertToHtml(quint32 expositionPassedMs,
                                    quint32 deadTimeMs,
                                    quint32 spectrumIntensityIntegral,
                                    QString& outHtmlString)
{
    
}
//============================================================
bool ZMeasuringParametersHandler::zp_calcParameters(quint32 expositionPassedMs,
                                        quint32 deadTimeMs,
                                        quint32 spectrumIntensityIntegral,
                       quint32& outAliveTime,
                       quint32& outdeadTimePercent,
                       quint32& outInputWorkload,
                       quint32& outOutputWorkload)
{
    
}
//============================================================
